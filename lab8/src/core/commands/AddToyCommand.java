package core.commands;

import core.Playroom;
import core.toys.*;
import util.AppLogger; // –Ü–º–ø–æ—Ä—Ç –ª–æ–≥–µ—Ä–∞
import java.util.InputMismatchException; // –Ü–º–ø–æ—Ä—Ç –≤–∏–Ω—è—Ç–∫—É
import java.util.Scanner;
import java.util.logging.Level; // –Ü–º–ø–æ—Ä—Ç —Ä—ñ–≤–Ω—ñ–≤
import java.util.logging.Logger;

public class AddToyCommand implements Command {
    private static final Logger logger = AppLogger.getLogger(); // –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–µ—Ä
    private final Playroom playroom;

    public AddToyCommand(Playroom playroom) {
        this.playroom = playroom;
    }

    @Override
    public void execute() {
        Scanner scanner = new Scanner(System.in);
        logger.info("\n--- –ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —ñ–≥—Ä–∞—à–∫–∏ ---");
        System.out.println("–Ø–∫—É —ñ–≥—Ä–∞—à–∫—É –¥–æ–¥–∞—Ç–∏? 1 - –ú–∞—à–∏–Ω–∫–∞, 2 - –õ—è–ª—å–∫–∞, 3 - –ú'—è—á, 4 - –ö—É–±–∏–∫");
        System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");
        String choice = scanner.nextLine();
        logger.log(Level.FINE, "–¢–∏–ø —ñ–≥—Ä–∞—à–∫–∏ –æ–±—Ä–∞–Ω–æ: {0}", choice);

        // üëá –í–ê–ñ–õ–ò–í–û: –í–µ—Å—å –±–ª–æ–∫ –≤–≤–æ–¥—É —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–≥–æ—Ä–Ω—É—Ç–æ –≤ try
        try {
            System.out.print("–ù–∞–∑–≤–∞: ");
            String name = scanner.nextLine();
            System.out.print("–†–æ–∑–º—ñ—Ä (–ú–∞–ª–µ–Ω—å–∫–∏–π/–°–µ—Ä–µ–¥–Ω—ñ–π/–í–µ–ª–∏–∫–∏–π): ");
            String size = scanner.nextLine();
            System.out.print("–¶—ñ–Ω–∞: ");
            // –°–∞–º–µ —Ü–µ–π —Ä—è–¥–æ–∫ –º–æ–∂–µ –≤–∏–∫–∏–Ω—É—Ç–∏ InputMismatchException
            float price = scanner.nextFloat();
            scanner.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø—ñ—Å–ª—è nextFloat()
            System.out.print("–ö–æ–ª—ñ—Ä: ");
            String color = scanner.nextLine();

            Toy newToy = null;
            switch (choice) {
                case "1":
                    System.out.print("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª—ñ—Å: ");
                    // –¶–µ–π —Ä—è–¥–æ–∫ —Ç–µ–∂ –º–æ–∂–µ –≤–∏–∫–∏–Ω—É—Ç–∏ InputMismatchException
                    int wheels = scanner.nextInt();
                    scanner.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø—ñ—Å–ª—è nextInt()
                    newToy = new Car(name, size, price, color, wheels);
                    break;
                case "2":
                    System.out.print("–ö–æ–ª—ñ—Ä –≤–æ–ª–æ—Å—Å—è: ");
                    String hairColor = scanner.nextLine();
                    newToy = new Doll(name, size, price, color, hairColor);
                    break;
                case "3":
                    System.out.print("–î—ñ–∞–º–µ—Ç—Ä (—Å–º): ");
                    // –¶–µ–π —Ä—è–¥–æ–∫ —Ç–µ–∂ –º–æ–∂–µ –≤–∏–∫–∏–Ω—É—Ç–∏ InputMismatchException
                    float diameter = scanner.nextFloat();
                    scanner.nextLine(); // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø—ñ—Å–ª—è nextFloat()
                    newToy = new Ball(name, size, price, color, diameter);
                    break;
                case "4":
                    System.out.print("–§–æ—Ä–º–∞: ");
                    String shape = scanner.nextLine();
                    newToy = new Block(name, size, price, color, shape);
                    break;
                default:
                    logger.warning("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø —ñ–≥—Ä–∞—à–∫–∏ –æ–±—Ä–∞–Ω–æ: " + choice);
                    System.out.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø —ñ–≥—Ä–∞—à–∫–∏.");
                    break;
            }

            if (newToy != null) {
                logger.log(Level.FINE, "–°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±''—î–∫—Ç —ñ–≥—Ä–∞—à–∫–∏: {0}", newToy.getName());
                playroom.addToy(newToy);
            }
            // üëá –í–ê–ñ–õ–ò–í–û: –ë–ª–æ–∫ catch –¥–ª—è –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –≤–≤–æ–¥—É
        } catch (InputMismatchException e) {
            // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É —è–∫ SEVERE
            logger.log(Level.SEVERE, "–ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è —á–∏—Å–ª–æ)", e);
            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: –í–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ —ñ–≥—Ä–∞—à–∫—É —â–µ —Ä–∞–∑.");
            // –û—á–∏—â–∞—î–º–æ –∑–∞–ª–∏—à–∫–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥—É –∑—ñ —Å–∫–∞–Ω–µ—Ä–∞!
            if (scanner.hasNextLine()) {
                scanner.nextLine();
            }
        } catch (Exception e) { // –õ–æ–≤–∏–º–æ —ñ–Ω—à—ñ –º–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏
            logger.log(Level.SEVERE, "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —ñ–≥—Ä–∞—à–∫–∏", e);
            System.out.println("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ –ª–æ–≥–∞—Ö.");
            if (scanner.hasNextLine()) { // –ù–∞ –ø—Ä–æ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫
                scanner.nextLine();
            }
        }
    }
}