package battles;

import droids.Droid;
import droids.HealerDroid; // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Å–∏–º–≤–æ–ª HealerDroid —Ç–µ–ø–µ—Ä —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è
import droids.TankDroid;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import core.GameManager;
import core.ConsoleColors;

public class FightTeamVsTeamManager {

    public static void startFight(List<Droid> team1, List<Droid> team2) {
        if (team1 == null || team2 == null || team1.isEmpty() || team2.isEmpty()) {
            System.out.println("‚õî –ë—ñ–π –Ω–µ –º–æ–∂–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏—Å—è: –∫–æ–º–∞–Ω–¥–∏ –Ω–µ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω—ñ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ.");
            return;
        }

        System.out.println(ConsoleColors.BOLD + ConsoleColors.PURPLE + "\n*** –ë–Ü–ô –†–û–ó–ü–û–ß–ê–¢–û: –ö–æ–º–∞–Ω–¥–∞ 1 (" + team1.size() + ") vs –ö–æ–º–∞–Ω–¥–∞ 2 (" + team2.size() + ") ***" + ConsoleColors.RESET);

        int round = 1;

        while (!team1.isEmpty() && !team2.isEmpty()) {
            System.out.println("\n===== –†–ê–£–ù–î " + round + " =====");

            System.out.println("--- –•–Ü–î –ö–û–ú–ê–ù–î–ò 1 ---");
            performTeamTurn(team1, team2);
            if (team2.isEmpty()) break;

            System.out.println("--- –•–Ü–î –ö–û–ú–ê–ù–î–ò 2 ---");
            performTeamTurn(team2, team1);

            round++;
        }

        System.out.println(ConsoleColors.BOLD + "\n*** –ë–Ü–ô –ó–ê–í–ï–†–®–ï–ù–û! ***" + ConsoleColors.RESET);
        if (team1.isEmpty()) {
            System.out.println(ConsoleColors.BOLD + ConsoleColors.GREEN + "üèÜ –ü–µ—Ä–µ–º–æ–≥–ª–∞ –ö–û–ú–ê–ù–î–ê 2! –ó–∞–ª–∏—à–∏–ª–æ—Å—è –¥—Ä–æ—ó–¥—ñ–≤: " + team2.size() + ConsoleColors.RESET);
        } else if (team2.isEmpty()) {
            System.out.println(ConsoleColors.BOLD + ConsoleColors.GREEN + "üèÜ –ü–µ—Ä–µ–º–æ–≥–ª–∞ –ö–û–ú–ê–ù–î–ê 1! –ó–∞–ª–∏—à–∏–ª–æ—Å—è –¥—Ä–æ—ó–¥—ñ–≤: " + team1.size() + ConsoleColors.RESET);
        } else {
            System.out.println("–ù—ñ—á–∏—è! –û–±–∏–¥–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –∑–Ω–∏—â–µ–Ω–æ.");
        }

        restoreTeamHealth(team1);
        restoreTeamHealth(team2);
        System.out.println("–ó–¥–æ—Ä–æ–≤'—è —É—Å—ñ—Ö –¥—Ä–æ—ó–¥—ñ–≤ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ.");
    }

    public static List<Droid> selectTeam(List<Droid> allDroids, Scanner scanner, int teamNumber) {
        return selectTeam(allDroids, scanner, teamNumber, new ArrayList<>());
    }

    public static List<Droid> selectTeam(List<Droid> allDroids, Scanner scanner, int teamNumber, List<Droid> excludedDroids) {
        List<Droid> team = new ArrayList<>();
        System.out.println("\n--- –§–û–†–ú–£–í–ê–ù–ù–Ø –ö–û–ú–ê–ù–î–ò " + teamNumber + " ---");
        System.out.print("–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –∫–æ–º–∞–Ω–¥–∏ (–º—ñ–Ω. 2): ");

        int teamSize;
        if (scanner.hasNextInt()) {
            teamSize = scanner.nextInt();
            scanner.nextLine();
        } else {
            System.out.println("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥.");
            scanner.nextLine();
            return null;
        }

        if (teamSize < 2 || teamSize > (allDroids.size() - excludedDroids.size())) {
            System.out.println("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤—ñ–ª—å–Ω–∏—Ö –¥—Ä–æ—ó–¥—ñ–≤.");
            return null;
        }

        System.out.println("–û–±–µ—Ä—ñ—Ç—å " + teamSize + " –¥—Ä–æ—ó–¥—ñ–≤ (–∑–∞ –Ω–æ–º–µ—Ä–æ–º) –¥–ª—è –ö–æ–º–∞–Ω–¥–∏ " + teamNumber + ":");

        for (int i = 0; i < teamSize; i++) {
            GameManager.showDroidList();
            System.out.print("–í–∏–±—ñ—Ä " + (i + 1) + "/" + teamSize + ": –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –¥—Ä–æ—ó–¥–∞: ");

            if (scanner.hasNextInt()) {
                // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –Ü–Ω–¥–µ–∫—Å –æ—Ç—Ä–∏–º—É—î—Ç—å—Å—è —è–∫ int
                int index = scanner.nextInt() - 1;
                scanner.nextLine();

                if (index >= 0 && index < allDroids.size()) {
                    Droid selectedDroid = allDroids.get(index);

                    if (team.contains(selectedDroid)) {
                        System.out.println("‚ö†Ô∏è –¶–µ–π –¥—Ä–æ—ó–¥ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–æ–≥–æ.");
                        i--;
                    } else if (excludedDroids.contains(selectedDroid)) {
                        System.out.println("‚õî –¶–µ–π –¥—Ä–æ—ó–¥ —É–∂–µ –≤ —ñ–Ω—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–æ–≥–æ.");
                        i--;
                    } else {
                        team.add(selectedDroid);
                        System.out.println("‚úÖ " + selectedDroid.getName() + " –¥–æ–¥–∞–Ω–æ –¥–æ –ö–æ–º–∞–Ω–¥–∏ " + teamNumber + ".");
                    }
                } else {
                    System.out.println("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –¥—Ä–æ—ó–¥–∞.");
                    i--;
                }
            } else {
                System.out.println("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –ü–æ—Ç—Ä—ñ–±–µ–Ω –Ω–æ–º–µ—Ä.");
                scanner.nextLine();
                i--;
            }
        }
        return team;
    }

    private static void performTeamTurn(List<Droid> attackingTeam, List<Droid> defendingTeam) {
        List<Droid> aliveAttackers = new ArrayList<>(attackingTeam);

        for (Droid attacker : aliveAttackers) {
            if (!attacker.isAlive()) continue;

            // 1. –ü–ê–°–ò–í–ù–ê –†–ï–ì–ï–ù–ï–†–ê–¶–Ü–Ø –ï–ù–ï–†–ì–Ü–á
            attacker.passiveRecharge();
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ getStatusInfo(), –∞ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π getEnergyBar()
            System.out.println(ConsoleColors.PURPLE + "   [EN] " + attacker.getName() +
                    " –æ—Ç—Ä–∏–º—É—î " + attacker.getPassiveEnergyGain() + " EN. (–ü–æ—Ç–æ—á–Ω–∏–π EN: " + attacker.getEnergy() + ")" + ConsoleColors.RESET);

            // 2. –ü–†–Ü–û–†–ò–¢–ï–¢ –¢–ê–ù–ö–ê (–í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ó–î–Ü–ë–ù–û–°–¢–Ü)
            if (attacker instanceof TankDroid tank) {
                if (tank.getHealth() < tank.getMaxHealth()) {
                    if (tank.activateDefenseStance()) {
                        continue;
                    }
                }
            }

            // 3. –ó–í–ò–ß–ê–ô–ù–ê –õ–û–ì–Ü–ö–ê –î–Ü–ô
            if (attacker instanceof HealerDroid healer) {
                Droid weakestAlly = findWeakestAlly(attackingTeam);

                if (weakestAlly != null && weakestAlly.getHealth() < weakestAlly.getMaxHealth()) {
                    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–ª–∏–∫ healAlly –∑ –æ–±'—î–∫—Ç–∞ healer (—É—Å—É–≤–∞—î Cannot resolve method)
                    healer.healAlly(weakestAlly);
                } else {
                    attackTarget(attacker, defendingTeam);
                }
            } else {
                attackTarget(attacker, defendingTeam);
            }
            if (defendingTeam.isEmpty()) break;
        }
    }

    private static void attackTarget(Droid attacker, List<Droid> defendingTeam) {
        Droid target = findTarget(defendingTeam);
        if (target != null) {
            attacker.attack(target);

            System.out.println("   " + target.getStatusInfo());

            if (!target.isAlive()) {
                defendingTeam.remove(target);
                System.out.println(ConsoleColors.BOLD + ConsoleColors.RED + "üí• –î—Ä–æ—ó–¥ " + target.getName() + " –ó–ù–ò–©–ï–ù–ò–ô!" + ConsoleColors.RESET);
            }
        }
    }

    private static Droid findWeakestAlly(List<Droid> team) {
        if (team.isEmpty()) return null;

        Droid weakest = null;
        double minHealthRatio = 1.0;

        for (Droid droid : team) {
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ double, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–µ—Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ —Ç–∏–ø—ñ–≤ –ø—Ä–∏ –¥—ñ–ª–µ–Ω–Ω—ñ
            double currentRatio = (double) droid.getHealth() / droid.getMaxHealth();
            if (currentRatio < minHealthRatio) {
                minHealthRatio = currentRatio;
                weakest = droid;
            }
        }
        return weakest;
    }

    private static Droid findTarget(List<Droid> targetTeam) {
        if (targetTeam.isEmpty()) return null;

        Droid target = null;
        int minHealth = Integer.MAX_VALUE;

        for (Droid droid : targetTeam) {
            if (droid.isAlive() && droid.getHealth() < minHealth) {
                minHealth = droid.getHealth();
                target = droid;
            }
        }
        return target;
    }

    private static void restoreTeamHealth(List<Droid> team) {
        for (Droid droid : team) {
            droid.setHealth(droid.getMaxHealth());
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è setEnergy
            droid.setEnergy(droid.getMaxEnergy());
        }
    }
}